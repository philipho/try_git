<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:amq="http://activemq.apache.org/schema/core"
xmlns:jms="http://www.springframework.org/schema/jms"
xmlns:context="http://www.springframework.org/schema/context"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core-5.7.0.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-3.1.xsd">

<import resource="classpath*:appContext.xml" />

<!-- creates an activemq connection factory using the amq namespace -->
<amq:connectionFactory id="amqConnectionFactory" brokerURL="${jms.url}" /> 
<!--  userName="${jms.username}" password="${jms.password}" /-->

<!-- A destination in ActiveMQ 
Either create a bean of class ActiveMQQueue or ActiveMQTopic 
Or in JmsTemplate, supply the property pubSubDomain and set the value to either true or false
-->
<!--   bean id="destination" class="org.apache.activemq.command.ActiveMQQueue" -->
<bean id="destination" class="org.apache.activemq.command.ActiveMQTopic">
	<constructor-arg value="TWITTER_TOPIC.USERS" />
</bean>

<!-- CachingConnectionFactory Definition, sessionCacheSize property is the number of sessions to cache -->
<bean id="connectionFactory" class="org.springframework.jms.connection.CachingConnectionFactory">
    <constructor-arg ref="amqConnectionFactory" />
    <property name="exceptionListener" ref="jmsExceptionListener" />
    <property name="sessionCacheSize" value="100" />
</bean>
 
 <!-- Objects required by the TweetLoader object -->
<bean id="msgListenerContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
	<property name="connectionFactory" ref="connectionFactory" />
	<property name="destination" ref="destination" />
	<property name="pubSubDomain" value="true" />
</bean>

		<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
			destroy-method="close">
			<property name="driverClassName" value="com.mysql.jdbc.Driver" />
			<property name="url" value="jdbc:mysql://localhost:3306/test" />
			<property name="username" value="soba31admin" />
			<property name="password" value="admin_123" />
		</bean>

	<bean id="userManager" class="com.mec.datareceiver.service.SimpleUserManager">
		<property name="userDao" ref="userDao" />
	</bean>
	<bean id="userDao" class="com.mec.datareceiver.model.dao.JdbcUserDao">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<bean id="activityManager" class="com.mec.datareceiver.service.SimpleActivityManager">
		<property name="activityDao" ref="activityDao" />
	</bean>
	<bean id="activityDao" class="com.mec.datareceiver.model.dao.JdbcActivityDao">
		<property name="dataSource" ref="dataSource" />
	</bean>


<bean id="loader" class="com.mec.datareceiver.TweetLoader">
	<constructor-arg ref="msgListenerContainer" />
	<constructor-arg ref="userManager" />
	<constructor-arg ref="activityManager" />
</bean>

<!-- listener container definition using the jms namespace, concurrency is the max number of concurrent listeners that can be started -->
<!-- jms:listener-container concurrency="10" >
    <jms:listener id="QueueListener" destination="Queue.Name" ref="queueListener" />
</jms:listener-container -->
</beans>
